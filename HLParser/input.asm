DATA SECTION
CONSOLE_OUT_HANDLE_CODE EQU -11
RCKEEP DD 0
CONST_10 DD 10
BUFFER DB 12 DUP ('0')

CODE SECTION
START:
PUSH EBP
MOV EBP, ESP

SUB ESP, 12

PUSH 3

POP EAX
MOV [EBP - 4], EAX

PUSH 0

PUSH 5

POP EAX
POP EDX
SUB EDX, EAX
PUSH EDX

POP EAX
MOV [EBP - 8], EAX

PUSH 8

POP EAX
MOV [EBP - 12], EAX

MOV EAX, [EBP - 8]
PUSH EAX

PUSH 8

POP EAX
POP EDX
ADD EAX, EDX
PUSH EAX

POP EAX
MOV [EBP - 4], EAX

MOV EAX, [EBP - 12]
PUSH EAX

PUSH 1

POP EAX
POP EDX
IMUL EAX, EDX
PUSH EAX

PUSH 2

XOR EDX, EDX
POP EBX
POP EAX
CDQ
IDIV EBX
PUSH EAX

POP EAX
MOV [EBP - 8], EAX

PUSH 3

PUSH 4

POP EAX
POP EDX
IMUL EAX, EDX
PUSH EAX

PUSH 3

PUSH 4

POP EAX
POP EDX
ADD EAX, EDX
PUSH EAX

PUSH 100

PUSH 2

POP EAX
POP EDX
IMUL EAX, EDX
PUSH EAX

PUSH 55

PUSH 4

POP EAX
POP EDX
IMUL EAX, EDX
PUSH EAX

POP EAX
POP EDX
SUB EDX, EAX
PUSH EDX

POP EAX
POP EDX
ADD EAX, EDX
PUSH EAX

POP EAX
POP EDX
ADD EAX, EDX
PUSH EAX

POP EAX
MOV [EBP - 12], EAX

MOV EAX, [EBP - 4]
PUSH EAX

POP EAX
CALL CLEAR_BUFFER
CALL FILL_BUFFER
MOV EBX, EAX
PUSH CONSOLE_OUT_HANDLE_CODE
CALL GetStdHandle
PUSH 0
PUSH ADDR RCKEEP
MOV ECX, [CONST_10]
SUB ECX, EBX
PUSH ECX
MOV ECX, ADDR BUFFER
ADD ECX, EBX
PUSH ECX
PUSH EAX
CALL WriteFile

MOV EAX, [EBP - 8]
PUSH EAX

POP EAX
CALL CLEAR_BUFFER
CALL FILL_BUFFER
MOV EBX, EAX
PUSH CONSOLE_OUT_HANDLE_CODE
CALL GetStdHandle
PUSH 0
PUSH ADDR RCKEEP
MOV ECX, [CONST_10]
SUB ECX, EBX
PUSH ECX
MOV ECX, ADDR BUFFER
ADD ECX, EBX
PUSH ECX
PUSH EAX
CALL WriteFile

MOV EAX, [EBP - 12]
PUSH EAX

POP EAX
CALL CLEAR_BUFFER
CALL FILL_BUFFER
MOV EBX, EAX
PUSH CONSOLE_OUT_HANDLE_CODE
CALL GetStdHandle
PUSH 0
PUSH ADDR RCKEEP
MOV ECX, [CONST_10]
SUB ECX, EBX
PUSH ECX
MOV ECX, ADDR BUFFER
ADD ECX, EBX
PUSH ECX
PUSH EAX
CALL WriteFile

ADD ESP, 12
MOV ESP, EBP
POP EBP
MOV EAX, 0
RET

CLEAR_BUFFER:
MOV ECX, 11
MOV EBX, 0x30
LEA EDX, ADDR BUFFER
CB_LOOP:
MOV B [EDX + ECX], BL
DEC ECX
CMP ECX, 0
JNE CB_LOOP
RET
FILL_BUFFER:
MOV ECX, [CONST_10]
PUSH EAX
TEST EAX, EAX
JNS >FB_LOOP
NEG EAX
FB_LOOP:
XOR EDX, EDX
MOV EBX, [CONST_10]
DIV EBX
ADD EDX, 0x30
PUSH EAX
LEA EAX, ADDR BUFFER
MOV [EAX + ECX - 1], DL
POP EAX
DEC ECX
OR EAX, EAX
JZ >FB_LOOP_END
JNE FB_LOOP
FB_LOOP_END:
POP EBX
TEST EBX, EBX
JNS >FB_END
LEA EAX, ADDR BUFFER
MOV B [EAX + ECX - 1], 2DH
DEC ECX
FB_END:
MOV EAX, ECX
RET
STRING_LENGTH:
MOV ECX, -1
MOV EBX, EAX
LEA EAX, EBX
SL_LOOP:
INC ECX
XOR EBX, EBX
MOV BL, [EAX + ECX]
CMP BL, 0x0
JNE <SL_LOOP
MOV EAX, ECX
RET
